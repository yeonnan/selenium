selenium을 사용해서 웹 자동화를 하려면, 브라우저를 코즈로 제어할 수 있어야 한다.
하지만 python 코드가 직접 chrome을 실행할 수는 없다.
대신 chrome driver라는 프로그램을 통해 브라우저를 간접적으로 제어하게 된다.


# chromeDriver란?
webdriver.Chrome()  처럼 크롬을 실행하는 명령을 내려도, 중간에서 chromeDriver라는 도구가 대신 브라우저를 띄워주는 역할을 한다.
즉, 파이썬 코드 → chromeDriver → chrome browser


# 기본 실행 구조
chromeDriver의 경로를 지정해서 실행하면 아래와 같은 구조로 작성된다.

from selenium import webdriver
from selenium.webdriver.chrome.service import Service

service_obj = Service('/Users/dayeonahn/Downloads/chromedriver-mac-arm64/chromedriver')   # 드라이버 경로
driver = webdriver.Chrome(service=service_obj)

Service 객체는 chromeDriver의 위치를 Selenium에 알려주는 역할을 한다.
webdriver.Chrome()은 이 Service를 이용해 실제 chrome 브라우저를 실행한다.


----------------------------------------------------------------------

# chromeDriver 설치 방법
1.내 크롬 버전 확인 136.0.7103.93 (arm64) 
2.https://googlechromelabs.github.io/chrome-for-testing/ 접속
3.stable → 136.0.7103.93 클릭 → mac-arm64 → chromdriver-mac-arm64.zip 클릭
4.압축 해제 후 cmd+option+c를 활용해 경로 확인
5.해당 경로를 Service()에 넘겨 실행


# 경로 지정 시 주의사항
경로를 제대로 명시하지 않아 오류가 났었다.
Service 객체에 경로를 지정할 때는 반드시 chromedriver 실행 파일 자체의 경로까지 정확하게 명시해야 한다.
- 잘못된 예 (폴더만 지정한 경우)
Service('/Users/사용자명/Downloads/chromedriver-mac-arm64')  # ← 실행 안 됨

- 올바른 예 (실행 파일까지 포함)
Service('/Users/사용자명/Downloads/chromedriver-mac-arm64/chromedriver')  # ← 실행됨


# 여기서 파일 경로를 사용하려면 실행 파일 권한 문제를 해결해야 한다.
macOS에서는 보안을 위해 인터넷에서 다운로드한 실행 파일에 잠금(quarantine) 속성을 자동 부여한다.
이 상태로는 chromedriver를 정상 실행할 수 없기 때문에 잠금 해제 해줘야 한다. - 다운로드 받은 파일 압축 해제한 경로
xattr -d com.apple.quarantine /Users/dayeonahn/Downloads/chromedriver-mac-arm64/chromedriver

또한 해당 파일이 실행 가능하도록 권한을 부여해야 한다.
chmod +x /Users/dayeonahn/Downloads/chromedriver-mac-arm64/chromedriver

이 두 명령어를 실행하면 chromedriver를 정상적으로 사용할 수 있다.